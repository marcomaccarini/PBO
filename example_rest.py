import requests
from ut import get_msg
import time

url_task = "http://localhost:1026/ngsi-ld/v1/entities/urn:ngsi-ld:Task:taskPBO/attrs"
url_process = "http://host.docker.internal:1026/ngsi-ld/v1/entities/urn:ngsi-ld:Process:PBO"


def f(x):
    return x[0] ** 2 + x[1] ** 2


def pref(x_next, j):
    # requesting preference.
    # this method simulates the preference expressed by the user.
    print("***User simulation***")
    time.sleep(6)
    # take the preferences already expressed by the user
    bb = j['status']['value']['x'][j['status']['value']['b_best'][0]]
    # take the best parameter seen so far
    id_ = len(j['status']['value']['x'])
    # append x_next to the points alreay tested
    j['status']['value']['x'].append(x_next)
    # calculate f(best)
    v_bb = f(bb)
    # calculate f(x_next)
    v_x_next = f(x_next)
    # express preference. if f(best) < f(x_next) it means that the user will say that
    # x_next is worse than the best parameter seen so far
    # otherwise the user will say that x_next is better than the best parameter seen so far
    # in this case the best parameter set seen so far will change
    if v_bb < v_x_next:
        j['status']['value']['b_in'].append([j['status']['value']['b_best'][0], id_, 1])
        print("Hidden function: f(x_best) < f(x_next). ", str(v_bb), "  < ", str(v_x_next))
        print("User says that x_next is worse than the best parameter seen so far")
    else:
        j['status']['value']['b_in'].append([id_, j['status']['value']['b_best'][0], 1])
        j['status']['value']['b_best'][0] = id_
        print("Hidden function: f(x_best) > f(x_next). ", str(v_bb), "  > ", str(v_x_next))
        print("User says that x_next is better than the best parameter seen so far, new best found!")

    # a = input('-1 if x next is better than the best, 1 otherwise')
    # if '-1':
    #    j['status']['value']['b_in'].append([id_, j['status']['value']['b_best'][0] , 1])
    #    j['status']['value']['b_best'][0] = id_
    # else:
    #    j['status']['value']['b_in'].append([j['status']['value']['b_best'][0] , id_, 1])


# take the message for taskPBO
j = get_msg()
# make patch request to taskPBO
r = requests.patch(url_task, json=j)
# get back the request from Process:PBO
x_next = requests.get(url_process)
# get x_next by filtering the response generated by  Process:PBO request
x_next = x_next.json().get('Status').get('value').get('x_next')
print("next point generate by PBO: ", x_next)

iterations = 20

for i in range(iterations):
    print("*** iteration ", i, " ***")
    # optimization loop
    # request the operator to express its preference regarding the point that PBO proposes
    pref(x_next, j)
    # make patch request to taskPBO with the updated preferences
    r = requests.patch(url_task, json=j)
    x_next = requests.get(url_process)
    x_next = x_next.json().get('Status').get('value').get('x_next')
    print("next point generate by PBO: ", x_next)
